// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.3
// source: grpc_nft.proto

package mpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReqGetAptosNFTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddr string         `protobuf:"bytes,1,opt,name=wallet_addr,json=walletAddr,proto3" json:"wallet_addr,omitempty"`
	NftTypes   []ENFT_NFTType `protobuf:"varint,2,rep,packed,name=nft_types,json=nftTypes,proto3,enum=mpb.ENFT_NFTType" json:"nft_types,omitempty"`
}

func (x *ReqGetAptosNFTs) Reset() {
	*x = ReqGetAptosNFTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAptosNFTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAptosNFTs) ProtoMessage() {}

func (x *ReqGetAptosNFTs) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAptosNFTs.ProtoReflect.Descriptor instead.
func (*ReqGetAptosNFTs) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{0}
}

func (x *ReqGetAptosNFTs) GetWalletAddr() string {
	if x != nil {
		return x.WalletAddr
	}
	return ""
}

func (x *ReqGetAptosNFTs) GetNftTypes() []ENFT_NFTType {
	if x != nil {
		return x.NftTypes
	}
	return nil
}

type ResGetAptosNFTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nfts []*AptosNFTNode `protobuf:"bytes,1,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (x *ResGetAptosNFTs) Reset() {
	*x = ResGetAptosNFTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetAptosNFTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetAptosNFTs) ProtoMessage() {}

func (x *ResGetAptosNFTs) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetAptosNFTs.ProtoReflect.Descriptor instead.
func (*ResGetAptosNFTs) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{1}
}

func (x *ResGetAptosNFTs) GetNfts() []*AptosNFTNode {
	if x != nil {
		return x.Nfts
	}
	return nil
}

type ReqGetAptosNFTMetadatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftIds []uint64 `protobuf:"varint,1,rep,packed,name=nft_ids,json=nftIds,proto3" json:"nft_ids,omitempty"`
}

func (x *ReqGetAptosNFTMetadatas) Reset() {
	*x = ReqGetAptosNFTMetadatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAptosNFTMetadatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAptosNFTMetadatas) ProtoMessage() {}

func (x *ReqGetAptosNFTMetadatas) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAptosNFTMetadatas.ProtoReflect.Descriptor instead.
func (*ReqGetAptosNFTMetadatas) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{2}
}

func (x *ReqGetAptosNFTMetadatas) GetNftIds() []uint64 {
	if x != nil {
		return x.NftIds
	}
	return nil
}

type ResGetAptosNFTMetadatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadatas []*AptosNFTMetadata `protobuf:"bytes,1,rep,name=metadatas,proto3" json:"metadatas,omitempty"`
}

func (x *ResGetAptosNFTMetadatas) Reset() {
	*x = ResGetAptosNFTMetadatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetAptosNFTMetadatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetAptosNFTMetadatas) ProtoMessage() {}

func (x *ResGetAptosNFTMetadatas) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetAptosNFTMetadatas.ProtoReflect.Descriptor instead.
func (*ResGetAptosNFTMetadatas) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{3}
}

func (x *ResGetAptosNFTMetadatas) GetMetadatas() []*AptosNFTMetadata {
	if x != nil {
		return x.Metadatas
	}
	return nil
}

type ReqGetAptosNFTsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WalletAddr string `protobuf:"bytes,2,opt,name=wallet_addr,json=walletAddr,proto3" json:"wallet_addr,omitempty"`
}

func (x *ReqGetAptosNFTsV2) Reset() {
	*x = ReqGetAptosNFTsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAptosNFTsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAptosNFTsV2) ProtoMessage() {}

func (x *ReqGetAptosNFTsV2) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAptosNFTsV2.ProtoReflect.Descriptor instead.
func (*ReqGetAptosNFTsV2) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{4}
}

func (x *ReqGetAptosNFTsV2) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqGetAptosNFTsV2) GetWalletAddr() string {
	if x != nil {
		return x.WalletAddr
	}
	return ""
}

type ResGetAptosNFTsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nfts []*AptosNFTNodeV2 `protobuf:"bytes,1,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (x *ResGetAptosNFTsV2) Reset() {
	*x = ResGetAptosNFTsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetAptosNFTsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetAptosNFTsV2) ProtoMessage() {}

func (x *ResGetAptosNFTsV2) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetAptosNFTsV2.ProtoReflect.Descriptor instead.
func (*ResGetAptosNFTsV2) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{5}
}

func (x *ResGetAptosNFTsV2) GetNfts() []*AptosNFTNodeV2 {
	if x != nil {
		return x.Nfts
	}
	return nil
}

type ReqGetAptosNFTOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *ReqGetAptosNFTOwner) Reset() {
	*x = ReqGetAptosNFTOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAptosNFTOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAptosNFTOwner) ProtoMessage() {}

func (x *ReqGetAptosNFTOwner) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAptosNFTOwner.ProtoReflect.Descriptor instead.
func (*ReqGetAptosNFTOwner) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{6}
}

func (x *ReqGetAptosNFTOwner) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type ResGetAptosNFTOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner *AccountInfo `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *ResGetAptosNFTOwner) Reset() {
	*x = ResGetAptosNFTOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResGetAptosNFTOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResGetAptosNFTOwner) ProtoMessage() {}

func (x *ResGetAptosNFTOwner) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResGetAptosNFTOwner.ProtoReflect.Descriptor instead.
func (*ResGetAptosNFTOwner) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{7}
}

func (x *ResGetAptosNFTOwner) GetOwner() *AccountInfo {
	if x != nil {
		return x.Owner
	}
	return nil
}

type ReqAdminGetAptosNFTsInCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *ReqAdminGetAptosNFTsInCollection) Reset() {
	*x = ReqAdminGetAptosNFTsInCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAdminGetAptosNFTsInCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAdminGetAptosNFTsInCollection) ProtoMessage() {}

func (x *ReqAdminGetAptosNFTsInCollection) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAdminGetAptosNFTsInCollection.ProtoReflect.Descriptor instead.
func (*ReqAdminGetAptosNFTsInCollection) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{8}
}

func (x *ReqAdminGetAptosNFTsInCollection) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type AdminGetAptosNFTsInCollectionNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId              uint32       `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenDataId          string       `protobuf:"bytes,2,opt,name=token_data_id,json=tokenDataId,proto3" json:"token_data_id,omitempty"`
	TokenName            string       `protobuf:"bytes,3,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TransactionTimestamp string       `protobuf:"bytes,4,opt,name=transaction_timestamp,json=transactionTimestamp,proto3" json:"transaction_timestamp,omitempty"`
	TokenUrl             string       `protobuf:"bytes,5,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	TransactionVersion   uint64       `protobuf:"varint,6,opt,name=transaction_version,json=transactionVersion,proto3" json:"transaction_version,omitempty"`
	Owner                *AccountInfo `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	OwnerAddr            string       `protobuf:"bytes,8,opt,name=owner_addr,json=ownerAddr,proto3" json:"owner_addr,omitempty"`
}

func (x *AdminGetAptosNFTsInCollectionNode) Reset() {
	*x = AdminGetAptosNFTsInCollectionNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetAptosNFTsInCollectionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetAptosNFTsInCollectionNode) ProtoMessage() {}

func (x *AdminGetAptosNFTsInCollectionNode) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetAptosNFTsInCollectionNode.ProtoReflect.Descriptor instead.
func (*AdminGetAptosNFTsInCollectionNode) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{9}
}

func (x *AdminGetAptosNFTsInCollectionNode) GetTokenId() uint32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *AdminGetAptosNFTsInCollectionNode) GetTokenDataId() string {
	if x != nil {
		return x.TokenDataId
	}
	return ""
}

func (x *AdminGetAptosNFTsInCollectionNode) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *AdminGetAptosNFTsInCollectionNode) GetTransactionTimestamp() string {
	if x != nil {
		return x.TransactionTimestamp
	}
	return ""
}

func (x *AdminGetAptosNFTsInCollectionNode) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *AdminGetAptosNFTsInCollectionNode) GetTransactionVersion() uint64 {
	if x != nil {
		return x.TransactionVersion
	}
	return 0
}

func (x *AdminGetAptosNFTsInCollectionNode) GetOwner() *AccountInfo {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *AdminGetAptosNFTsInCollectionNode) GetOwnerAddr() string {
	if x != nil {
		return x.OwnerAddr
	}
	return ""
}

type ResAdminGetAptosNFTsInCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftList []*AdminGetAptosNFTsInCollectionNode `protobuf:"bytes,1,rep,name=nft_list,json=nftList,proto3" json:"nft_list,omitempty"`
}

func (x *ResAdminGetAptosNFTsInCollection) Reset() {
	*x = ResAdminGetAptosNFTsInCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAdminGetAptosNFTsInCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAdminGetAptosNFTsInCollection) ProtoMessage() {}

func (x *ResAdminGetAptosNFTsInCollection) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAdminGetAptosNFTsInCollection.ProtoReflect.Descriptor instead.
func (*ResAdminGetAptosNFTsInCollection) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{10}
}

func (x *ResAdminGetAptosNFTsInCollection) GetNftList() []*AdminGetAptosNFTsInCollectionNode {
	if x != nil {
		return x.NftList
	}
	return nil
}

type ReqAdminGetCollectionNFTBuyers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *ReqAdminGetCollectionNFTBuyers) Reset() {
	*x = ReqAdminGetCollectionNFTBuyers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAdminGetCollectionNFTBuyers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAdminGetCollectionNFTBuyers) ProtoMessage() {}

func (x *ReqAdminGetCollectionNFTBuyers) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAdminGetCollectionNFTBuyers.ProtoReflect.Descriptor instead.
func (*ReqAdminGetCollectionNFTBuyers) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{11}
}

func (x *ReqAdminGetCollectionNFTBuyers) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type AdminGetCollectionNFTBuyersNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId              uint32       `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenDataId          string       `protobuf:"bytes,2,opt,name=token_data_id,json=tokenDataId,proto3" json:"token_data_id,omitempty"`
	TokenName            string       `protobuf:"bytes,3,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TransactionTimestamp string       `protobuf:"bytes,4,opt,name=transaction_timestamp,json=transactionTimestamp,proto3" json:"transaction_timestamp,omitempty"`
	TokenUrl             string       `protobuf:"bytes,5,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	TransactionVersion   uint64       `protobuf:"varint,6,opt,name=transaction_version,json=transactionVersion,proto3" json:"transaction_version,omitempty"`
	Buyer                *AccountInfo `protobuf:"bytes,7,opt,name=buyer,proto3" json:"buyer,omitempty"`
	BuyerAddr            string       `protobuf:"bytes,8,opt,name=buyer_addr,json=buyerAddr,proto3" json:"buyer_addr,omitempty"`
}

func (x *AdminGetCollectionNFTBuyersNode) Reset() {
	*x = AdminGetCollectionNFTBuyersNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetCollectionNFTBuyersNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetCollectionNFTBuyersNode) ProtoMessage() {}

func (x *AdminGetCollectionNFTBuyersNode) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetCollectionNFTBuyersNode.ProtoReflect.Descriptor instead.
func (*AdminGetCollectionNFTBuyersNode) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{12}
}

func (x *AdminGetCollectionNFTBuyersNode) GetTokenId() uint32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *AdminGetCollectionNFTBuyersNode) GetTokenDataId() string {
	if x != nil {
		return x.TokenDataId
	}
	return ""
}

func (x *AdminGetCollectionNFTBuyersNode) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *AdminGetCollectionNFTBuyersNode) GetTransactionTimestamp() string {
	if x != nil {
		return x.TransactionTimestamp
	}
	return ""
}

func (x *AdminGetCollectionNFTBuyersNode) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *AdminGetCollectionNFTBuyersNode) GetTransactionVersion() uint64 {
	if x != nil {
		return x.TransactionVersion
	}
	return 0
}

func (x *AdminGetCollectionNFTBuyersNode) GetBuyer() *AccountInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *AdminGetCollectionNFTBuyersNode) GetBuyerAddr() string {
	if x != nil {
		return x.BuyerAddr
	}
	return ""
}

type ResAdminGetCollectionNFTBuyers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftList []*AdminGetCollectionNFTBuyersNode `protobuf:"bytes,1,rep,name=nft_list,json=nftList,proto3" json:"nft_list,omitempty"`
}

func (x *ResAdminGetCollectionNFTBuyers) Reset() {
	*x = ResAdminGetCollectionNFTBuyers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAdminGetCollectionNFTBuyers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAdminGetCollectionNFTBuyers) ProtoMessage() {}

func (x *ResAdminGetCollectionNFTBuyers) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAdminGetCollectionNFTBuyers.ProtoReflect.Descriptor instead.
func (*ResAdminGetCollectionNFTBuyers) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{13}
}

func (x *ResAdminGetCollectionNFTBuyers) GetNftList() []*AdminGetCollectionNFTBuyersNode {
	if x != nil {
		return x.NftList
	}
	return nil
}

type ReqAdminGetCollectionNFTOffers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	DstAddr      string `protobuf:"bytes,2,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	StartTime    int64  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ReqAdminGetCollectionNFTOffers) Reset() {
	*x = ReqAdminGetCollectionNFTOffers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAdminGetCollectionNFTOffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAdminGetCollectionNFTOffers) ProtoMessage() {}

func (x *ReqAdminGetCollectionNFTOffers) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAdminGetCollectionNFTOffers.ProtoReflect.Descriptor instead.
func (*ReqAdminGetCollectionNFTOffers) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{14}
}

func (x *ReqAdminGetCollectionNFTOffers) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *ReqAdminGetCollectionNFTOffers) GetDstAddr() string {
	if x != nil {
		return x.DstAddr
	}
	return ""
}

func (x *ReqAdminGetCollectionNFTOffers) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ReqAdminGetCollectionNFTOffers) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type AdminGetCollectionNFTOffersNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId              uint32       `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenDataId          string       `protobuf:"bytes,2,opt,name=token_data_id,json=tokenDataId,proto3" json:"token_data_id,omitempty"`
	TokenName            string       `protobuf:"bytes,3,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TransactionTimestamp string       `protobuf:"bytes,4,opt,name=transaction_timestamp,json=transactionTimestamp,proto3" json:"transaction_timestamp,omitempty"`
	TokenUrl             string       `protobuf:"bytes,5,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	TransactionVersion   uint64       `protobuf:"varint,6,opt,name=transaction_version,json=transactionVersion,proto3" json:"transaction_version,omitempty"`
	Offer                *AccountInfo `protobuf:"bytes,7,opt,name=offer,proto3" json:"offer,omitempty"`
	OfferAddr            string       `protobuf:"bytes,8,opt,name=offer_addr,json=offerAddr,proto3" json:"offer_addr,omitempty"`
}

func (x *AdminGetCollectionNFTOffersNode) Reset() {
	*x = AdminGetCollectionNFTOffersNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetCollectionNFTOffersNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetCollectionNFTOffersNode) ProtoMessage() {}

func (x *AdminGetCollectionNFTOffersNode) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetCollectionNFTOffersNode.ProtoReflect.Descriptor instead.
func (*AdminGetCollectionNFTOffersNode) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{15}
}

func (x *AdminGetCollectionNFTOffersNode) GetTokenId() uint32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *AdminGetCollectionNFTOffersNode) GetTokenDataId() string {
	if x != nil {
		return x.TokenDataId
	}
	return ""
}

func (x *AdminGetCollectionNFTOffersNode) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *AdminGetCollectionNFTOffersNode) GetTransactionTimestamp() string {
	if x != nil {
		return x.TransactionTimestamp
	}
	return ""
}

func (x *AdminGetCollectionNFTOffersNode) GetTokenUrl() string {
	if x != nil {
		return x.TokenUrl
	}
	return ""
}

func (x *AdminGetCollectionNFTOffersNode) GetTransactionVersion() uint64 {
	if x != nil {
		return x.TransactionVersion
	}
	return 0
}

func (x *AdminGetCollectionNFTOffersNode) GetOffer() *AccountInfo {
	if x != nil {
		return x.Offer
	}
	return nil
}

func (x *AdminGetCollectionNFTOffersNode) GetOfferAddr() string {
	if x != nil {
		return x.OfferAddr
	}
	return ""
}

type ResAdminGetCollectionNFTOffers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftList []*AdminGetCollectionNFTOffersNode `protobuf:"bytes,1,rep,name=nft_list,json=nftList,proto3" json:"nft_list,omitempty"`
}

func (x *ResAdminGetCollectionNFTOffers) Reset() {
	*x = ResAdminGetCollectionNFTOffers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_nft_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResAdminGetCollectionNFTOffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResAdminGetCollectionNFTOffers) ProtoMessage() {}

func (x *ResAdminGetCollectionNFTOffers) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_nft_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResAdminGetCollectionNFTOffers.ProtoReflect.Descriptor instead.
func (*ResAdminGetCollectionNFTOffers) Descriptor() ([]byte, []int) {
	return file_grpc_nft_proto_rawDescGZIP(), []int{16}
}

func (x *ResAdminGetCollectionNFTOffers) GetNftList() []*AdminGetCollectionNFTOffersNode {
	if x != nil {
		return x.NftList
	}
	return nil
}

var File_grpc_nft_proto protoreflect.FileDescriptor

var file_grpc_nft_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x6d, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74,
	0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x66, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x70, 0x62,
	0x2e, 0x45, 0x4e, 0x46, 0x54, 0x2e, 0x4e, 0x46, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e,
	0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x66,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x66, 0x74,
	0x73, 0x22, 0x32, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x4e, 0x46, 0x54, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x6e,
	0x66, 0x74, 0x49, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x12, 0x33, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e,
	0x46, 0x54, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x4d, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x56, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x3c, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x56, 0x32, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x66, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x32, 0x52, 0x04, 0x6e, 0x66,
	0x74, 0x73, 0x22, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f,
	0x73, 0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70, 0x62,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xcb, 0x02, 0x0a,
	0x21, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46,
	0x54, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x22, 0x65, 0x0a, 0x20, 0x52, 0x65,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46,
	0x54, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x08, 0x6e, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6e, 0x66, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x45, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54, 0x42, 0x75, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x1f, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x46, 0x54, 0x42, 0x75, 0x79, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x61, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54,
	0x42, 0x75, 0x79, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x6e, 0x66, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x46, 0x54, 0x42, 0x75, 0x79, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x6e, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x71, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x46, 0x54, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x1f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x22, 0x61, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x6e, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6e, 0x66, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x32, 0xe7, 0x04, 0x0a, 0x0a, 0x4e, 0x46, 0x54, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46,
	0x54, 0x73, 0x12, 0x14, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x12, 0x52,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x1c, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x1a, 0x1c, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46,
	0x54, 0x73, 0x56, 0x32, 0x12, 0x16, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x56, 0x32, 0x1a, 0x16, 0x2e, 0x6d,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46,
	0x54, 0x73, 0x56, 0x32, 0x12, 0x46, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73,
	0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x1a, 0x18, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x1d,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54,
	0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e,
	0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x25, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x4e, 0x46, 0x54, 0x73, 0x49,
	0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x1b, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x46, 0x54, 0x42, 0x75, 0x79, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54, 0x42, 0x75, 0x79, 0x65, 0x72, 0x73, 0x1a,
	0x23, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54, 0x42, 0x75,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x46, 0x54, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x1a, 0x23, 0x2e, 0x6d, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x46, 0x54, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x42, 0x07, 0x5a,
	0x05, 0x2e, 0x2f, 0x6d, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_nft_proto_rawDescOnce sync.Once
	file_grpc_nft_proto_rawDescData = file_grpc_nft_proto_rawDesc
)

func file_grpc_nft_proto_rawDescGZIP() []byte {
	file_grpc_nft_proto_rawDescOnce.Do(func() {
		file_grpc_nft_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_nft_proto_rawDescData)
	})
	return file_grpc_nft_proto_rawDescData
}

var file_grpc_nft_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_grpc_nft_proto_goTypes = []interface{}{
	(*ReqGetAptosNFTs)(nil),                   // 0: mpb.ReqGetAptosNFTs
	(*ResGetAptosNFTs)(nil),                   // 1: mpb.ResGetAptosNFTs
	(*ReqGetAptosNFTMetadatas)(nil),           // 2: mpb.ReqGetAptosNFTMetadatas
	(*ResGetAptosNFTMetadatas)(nil),           // 3: mpb.ResGetAptosNFTMetadatas
	(*ReqGetAptosNFTsV2)(nil),                 // 4: mpb.ReqGetAptosNFTsV2
	(*ResGetAptosNFTsV2)(nil),                 // 5: mpb.ResGetAptosNFTsV2
	(*ReqGetAptosNFTOwner)(nil),               // 6: mpb.ReqGetAptosNFTOwner
	(*ResGetAptosNFTOwner)(nil),               // 7: mpb.ResGetAptosNFTOwner
	(*ReqAdminGetAptosNFTsInCollection)(nil),  // 8: mpb.ReqAdminGetAptosNFTsInCollection
	(*AdminGetAptosNFTsInCollectionNode)(nil), // 9: mpb.AdminGetAptosNFTsInCollectionNode
	(*ResAdminGetAptosNFTsInCollection)(nil),  // 10: mpb.ResAdminGetAptosNFTsInCollection
	(*ReqAdminGetCollectionNFTBuyers)(nil),    // 11: mpb.ReqAdminGetCollectionNFTBuyers
	(*AdminGetCollectionNFTBuyersNode)(nil),   // 12: mpb.AdminGetCollectionNFTBuyersNode
	(*ResAdminGetCollectionNFTBuyers)(nil),    // 13: mpb.ResAdminGetCollectionNFTBuyers
	(*ReqAdminGetCollectionNFTOffers)(nil),    // 14: mpb.ReqAdminGetCollectionNFTOffers
	(*AdminGetCollectionNFTOffersNode)(nil),   // 15: mpb.AdminGetCollectionNFTOffersNode
	(*ResAdminGetCollectionNFTOffers)(nil),    // 16: mpb.ResAdminGetCollectionNFTOffers
	(ENFT_NFTType)(0),                         // 17: mpb.ENFT.NFTType
	(*AptosNFTNode)(nil),                      // 18: mpb.AptosNFTNode
	(*AptosNFTMetadata)(nil),                  // 19: mpb.AptosNFTMetadata
	(*AptosNFTNodeV2)(nil),                    // 20: mpb.AptosNFTNodeV2
	(*AccountInfo)(nil),                       // 21: mpb.AccountInfo
}
var file_grpc_nft_proto_depIdxs = []int32{
	17, // 0: mpb.ReqGetAptosNFTs.nft_types:type_name -> mpb.ENFT.NFTType
	18, // 1: mpb.ResGetAptosNFTs.nfts:type_name -> mpb.AptosNFTNode
	19, // 2: mpb.ResGetAptosNFTMetadatas.metadatas:type_name -> mpb.AptosNFTMetadata
	20, // 3: mpb.ResGetAptosNFTsV2.nfts:type_name -> mpb.AptosNFTNodeV2
	21, // 4: mpb.ResGetAptosNFTOwner.owner:type_name -> mpb.AccountInfo
	21, // 5: mpb.AdminGetAptosNFTsInCollectionNode.owner:type_name -> mpb.AccountInfo
	9,  // 6: mpb.ResAdminGetAptosNFTsInCollection.nft_list:type_name -> mpb.AdminGetAptosNFTsInCollectionNode
	21, // 7: mpb.AdminGetCollectionNFTBuyersNode.buyer:type_name -> mpb.AccountInfo
	12, // 8: mpb.ResAdminGetCollectionNFTBuyers.nft_list:type_name -> mpb.AdminGetCollectionNFTBuyersNode
	21, // 9: mpb.AdminGetCollectionNFTOffersNode.offer:type_name -> mpb.AccountInfo
	15, // 10: mpb.ResAdminGetCollectionNFTOffers.nft_list:type_name -> mpb.AdminGetCollectionNFTOffersNode
	0,  // 11: mpb.NFTService.GetAptosNFTs:input_type -> mpb.ReqGetAptosNFTs
	2,  // 12: mpb.NFTService.GetAptosNFTMetadatas:input_type -> mpb.ReqGetAptosNFTMetadatas
	4,  // 13: mpb.NFTService.GetAptosNFTsV2:input_type -> mpb.ReqGetAptosNFTsV2
	6,  // 14: mpb.NFTService.GetAptosNFTOwner:input_type -> mpb.ReqGetAptosNFTOwner
	8,  // 15: mpb.NFTService.AdminGetAptosNFTsInCollection:input_type -> mpb.ReqAdminGetAptosNFTsInCollection
	11, // 16: mpb.NFTService.AdminGetCollectionNFTBuyers:input_type -> mpb.ReqAdminGetCollectionNFTBuyers
	14, // 17: mpb.NFTService.AdminGetCollectionNFTOffers:input_type -> mpb.ReqAdminGetCollectionNFTOffers
	1,  // 18: mpb.NFTService.GetAptosNFTs:output_type -> mpb.ResGetAptosNFTs
	3,  // 19: mpb.NFTService.GetAptosNFTMetadatas:output_type -> mpb.ResGetAptosNFTMetadatas
	5,  // 20: mpb.NFTService.GetAptosNFTsV2:output_type -> mpb.ResGetAptosNFTsV2
	7,  // 21: mpb.NFTService.GetAptosNFTOwner:output_type -> mpb.ResGetAptosNFTOwner
	10, // 22: mpb.NFTService.AdminGetAptosNFTsInCollection:output_type -> mpb.ResAdminGetAptosNFTsInCollection
	13, // 23: mpb.NFTService.AdminGetCollectionNFTBuyers:output_type -> mpb.ResAdminGetCollectionNFTBuyers
	16, // 24: mpb.NFTService.AdminGetCollectionNFTOffers:output_type -> mpb.ResAdminGetCollectionNFTOffers
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_grpc_nft_proto_init() }
func file_grpc_nft_proto_init() {
	if File_grpc_nft_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_grpc_nft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAptosNFTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetAptosNFTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAptosNFTMetadatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetAptosNFTMetadatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAptosNFTsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetAptosNFTsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAptosNFTOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResGetAptosNFTOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAdminGetAptosNFTsInCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetAptosNFTsInCollectionNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAdminGetAptosNFTsInCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAdminGetCollectionNFTBuyers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetCollectionNFTBuyersNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAdminGetCollectionNFTBuyers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAdminGetCollectionNFTOffers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetCollectionNFTOffersNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_nft_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResAdminGetCollectionNFTOffers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_nft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_nft_proto_goTypes,
		DependencyIndexes: file_grpc_nft_proto_depIdxs,
		MessageInfos:      file_grpc_nft_proto_msgTypes,
	}.Build()
	File_grpc_nft_proto = out.File
	file_grpc_nft_proto_rawDesc = nil
	file_grpc_nft_proto_goTypes = nil
	file_grpc_nft_proto_depIdxs = nil
}
